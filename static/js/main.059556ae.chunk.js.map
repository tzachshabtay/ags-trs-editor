{"version":3,"sources":["line.js","trsFile.js","toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Line","props","onLineChanged","e","setState","to","target","value","onFocus","focused","input","state","this","focus","from","trimStart","num","startsWith","substring","indexOf","Grid","container","alignItems","direction","spacing","style","marginTop","item","xs","TextField","label","placeholder","multiline","margin","fullWidth","onChange","inputRef","React","Component","File","lines","map","l","key","ref","line","paddingLeft","ColorLinearProgress","withStyles","colorPrimary","backgroundColor","barColorPrimary","LinearProgress","AGSToolbar","trackProgress","full","setTimeout","getFocused","entries","index","IsFocused","onNextClicked","current","length","Focus","onPreviousClicked","onNextMissingClicked","cursor","onPreviousMissingClicked","genFile","text","download","element","document","createElement","file","Blob","type","href","URL","createObjectURL","body","appendChild","click","upload","AppBar","position","Toolbar","Typography","variant","paddingRight","Tooltip","title","aria-label","IconButton","edge","color","onClick","marginRight","flexGrow","renderProgress","percent","Math","round","progress","App","fileInput","display","onchange","files","reader","FileReader","onload","contents","result","func","removeChild","readAsText","onUploaded","replace","split","last","push","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.059556ae.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class Line extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { to: props.to };\n    }\n\n    IsFocused() {\n        return this.props.focused.input === this;\n    }\n\n    Focus() {\n        if (this.input) {\n            this.input.focus();\n        }\n    }\n\n    onLineChanged = (e) => {\n        this.setState({ to: e.target.value });\n    }\n\n    onFocus = (e) => {\n        this.props.focused.input = this;\n    }\n\n    render() {\n        let from = this.props.from.trimStart();\n        let num = \"\";\n        if (from.startsWith(\"&\")) {\n            num = from.substring(1, from.indexOf(\" \"));\n            from = from.substring(from.indexOf(\" \") + 1);\n        }\n        let to = this.state.to ? this.state.to.trimStart() : \"\";\n        if (to.startsWith(\"&\")) {\n            to = to.substring(to.indexOf(\" \") + 1);\n        }\n        return (<Grid container alignItems=\"center\" direction=\"row\" spacing={0} style={{ marginTop: 5 }}>\n            <Grid item xs={1}>\n                <span>{num}</span>\n            </Grid>\n            <Grid item xs={11}>\n                <TextField\n                    label={from}\n                    placeholder=\"Missing translation\"\n                    multiline\n                    margin=\"normal\"\n                    fullWidth\n                    value={to}\n                    onChange={this.onLineChanged}\n                    onFocus={this.onFocus}\n                    inputRef={input => { if (input) this.input = input; }}\n                />\n            </Grid>\n        </Grid>)\n    }\n}","import React from 'react';\nimport Line from './line';\n\nexport default class File extends React.Component {\n    render() {\n        const focused = { input: null };\n        const lines = this.props.lines.map(l => <Line key={l.from} from={l.from} to={l.to} focused={focused} ref={line => { if (line) l.ref = line; }}></Line>)\n        return (\n            <div style={{ paddingLeft: 10 }}>\n                {lines}\n            </div>)\n    }\n}","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst ColorLinearProgress = withStyles({\n    colorPrimary: {\n        backgroundColor: 'darkblue',\n    },\n    barColorPrimary: {\n        backgroundColor: 'lightblue',\n    },\n})(LinearProgress);\n\n\nexport default class AGSToolbar extends React.Component {\n\n    componentDidMount() {\n        setTimeout(this.trackProgress, 500);\n    }\n\n    trackProgress = () => {\n        if (this.props.lines) {\n            let full = 0;\n            for (const line of this.props.lines) {\n                if (line.ref.state.to) full += 1;\n            }\n            this.setState({ full });\n        }\n        setTimeout(this.trackProgress, 500);\n    }\n\n    getFocused = () => {\n        for (const [index, line] of this.props.lines.entries()) {\n            if (line.ref.IsFocused()) {\n                return index;\n            }\n        }\n        return -1;\n    }\n\n    onNextClicked = () => {\n        const current = this.getFocused();\n        const toFocus = this.props.lines[(current + 1) % this.props.lines.length];\n        toFocus.ref.Focus();\n    }\n\n    onPreviousClicked = () => {\n        let current = this.getFocused();\n        if (current < 1) {\n            current = this.props.lines.length;\n        }\n        const toFocus = this.props.lines[(current - 1) % this.props.lines.length];\n        toFocus.ref.Focus();\n    }\n\n    onNextMissingClicked = () => {\n        let current = this.getFocused();\n        if (current < 0) {\n            current = 0;\n        }\n        let cursor = current;\n        while (true) {\n            cursor = (cursor + 1) % this.props.lines.length;\n            const line = this.props.lines[cursor];\n            if (!line.ref.state.to || cursor === current) {\n                line.ref.Focus();\n                break;\n            }\n        }\n    }\n\n    onPreviousMissingClicked = () => {\n        let current = this.getFocused();\n        if (current < 0) {\n            current = this.props.lines.length - 1;\n        }\n        let cursor = current;\n        while (true) {\n            cursor = (cursor - 1) % this.props.lines.length;\n            if (cursor < 0) {\n                cursor = this.props.lines.length - 1;\n            }\n            const line = this.props.lines[cursor];\n            if (!line.ref.state.to || cursor === current) {\n                line.ref.Focus();\n                break;\n            }\n        }\n    }\n\n    genFile = () => {\n        let text = \"\";\n        for (const line of this.props.lines) {\n            text += `${line.from}\\r\\n${line.ref.state.to || \"\"}\\r\\n`;\n        }\n        this.download(text);\n    }\n\n    download = (text) => {\n        //https://stackoverflow.com/questions/44656610/download-a-string-as-txt-file-in-react/44661948\n        const element = document.createElement(\"a\");\n        const file = new Blob([text], { type: 'text/plain' });\n        element.href = URL.createObjectURL(file);\n        element.download = \"ags.trs\";\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    upload = () => {\n        this.props.upload();\n    }\n\n    render() {\n        return (\n            <>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" style={{ paddingRight: 50 }}>\n                            AGS TRS Editor\n                        </Typography>\n                        <Tooltip title=\"Load\" aria-label=\"load\">\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={this.upload}>\n                                <CloudUploadIcon />\n                            </IconButton>\n                        </Tooltip>\n                        {this.props.lines && (\n                            <>\n                                <Tooltip title=\"Save\" aria-label=\"save\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.genFile} style={{ marginRight: 50 }}>\n                                        <CloudDownloadIcon />\n                                    </IconButton>\n                                </Tooltip>\n\n                                <Tooltip title=\"Previous missing line\" aria-label=\"previous missing line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onPreviousMissingClicked}>\n                                        <SkipPreviousIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Previous line (SHIFT + TAB)\" aria-label=\"previous line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onPreviousClicked}>\n                                        <ChevronLeftIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Next line (TAB)\" aria-label=\"next line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onNextClicked}>\n                                        <ChevronRightIcon />\n                                    </IconButton>\n                                </Tooltip >\n                                <Tooltip title=\"Next missing line\" aria-label=\"next missing line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onNextMissingClicked}>\n                                        <SkipNextIcon />\n                                    </IconButton>\n                                </Tooltip >\n                            </>\n                        )}\n                        <div style={{ flexGrow: 1 }} />\n                        <Tooltip title=\"Source Code\" aria-label=\"source code\">\n                            <IconButton color=\"inherit\" target=\"_blank\" href=\"https://github.com/tzachshabtay/ags-trs-editor/\">\n                                <GitHubIcon />\n                            </IconButton>\n                        </Tooltip >\n                    </Toolbar >\n                </AppBar >\n                {this.renderProgress()}\n            </>\n        )\n    }\n\n    renderProgress() {\n        if (!this.props.lines) {\n            return null;\n        }\n        const full = this.state ? this.state.full || 0 : 0;\n        const percent = Math.round((full / this.props.lines.length) * 100);\n        const progress = `${full}/${this.props.lines.length} Completed (${percent}%)`\n        return (\n            <Tooltip title={progress} aria-label=\"progress\">\n                <ColorLinearProgress variant=\"determinate\" value={percent} />\n            </Tooltip>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport File from './trsFile';\nimport AGSToolbar from './toolbar';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AGSToolbar lines={this.state && this.state.lines} upload={this.upload} />\n        {this.state && <File lines={this.state.lines} />}\n      </div>\n    );\n  }\n\n  upload = () => {\n    //https://stackoverflow.com/questions/3582671/how-to-open-a-local-disk-file-with-javascript\n    const readFile = function (e) {\n      var file = e.target.files[0];\n      if (!file) {\n        return;\n      }\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var contents = e.target.result;\n        fileInput.func(contents)\n        document.body.removeChild(fileInput)\n      }\n      reader.readAsText(file)\n    }\n    const fileInput = document.createElement(\"input\")\n    fileInput.type = 'file'\n    fileInput.style.display = 'none'\n    fileInput.onchange = readFile\n    fileInput.func = this.onUploaded\n    document.body.appendChild(fileInput)\n    fileInput.click()\n  }\n\n  onUploaded = (contents) => {\n    const lines = contents.replace(/\\r/g, \"\").split(\"\\n\");\n    let result = [];\n    let from = \"\";\n    let to = \"\";\n    let last = \"\";\n    for (const line of lines) {\n      if (line.startsWith(\"&\")) {\n        if (to) {\n          result.push({ from, to });\n          from = line;\n          last = line.substring(1, line.indexOf(\" \"));\n          to = \"\";\n        } else if (from) {\n          let num = line.substring(1, line.indexOf(\" \"));\n          if (num !== last) {\n            last = num;\n            result.push({ from, to });\n            from = line;\n            to = \"\";\n          } else {\n            to = line;\n          }\n        } else {\n          from = line;\n          last = line.substring(1, line.indexOf(\" \"));\n        }\n      } else {\n        if (to) {\n          to = `${to}\\n${line}`;\n        } else {\n          from = `${from}\\n${line}`;\n        }\n      }\n    }\n    if (from) {\n      result.push({ from, to });\n    }\n    this.setState({ lines: result });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}