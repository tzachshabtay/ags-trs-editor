{"version":3,"sources":["context.js","line.js","trsFile.js","toolbar.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","Line","props","onLineChanged","e","context","lines","index","target","value","setState","to","onFocus","focused","input","state","this","focus","from","trimStart","TextField","label","placeholder","multiline","margin","fullWidth","onChange","inputRef","Component","contextType","File","rowRenderer","key","style","isScrolling","isVisible","l","ref","line","paddingLeft","paddingTop","paddingBottom","height","flexGrow","width","rowCount","length","rowHeight","list","ColorLinearProgress","withStyles","colorPrimary","backgroundColor","barColorPrimary","LinearProgress","AGSToolbar","getTo","undefined","isMissing","trackProgress","full","setTimeout","getFocused","entries","IsFocused","onNextClicked","current","Focus","onPreviousClicked","onNextMissingClicked","cursor","scrollToRow","onPreviousMissingClicked","genFile","text","comments","download","element","document","createElement","file","Blob","type","href","URL","createObjectURL","body","appendChild","click","upload","AppBar","position","Toolbar","Typography","variant","paddingRight","Tooltip","title","aria-label","IconButton","edge","color","onClick","marginRight","loading","CircularProgress","renderProgress","percent","Math","round","progress","AppContainer","Provider","App","startUpload","fileInput","display","onchange","files","reader","FileReader","onload","contents","result","func","removeChild","readAsText","onUploaded","replace","split","startsWith","push","Array","forceUpdateGrid","forceUpdate","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAEaA,EAAaC,IAAMC,cAAc,ICEzBC,E,YAGjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAkBVC,cAAgB,SAACC,GACb,EAAKC,QAAQC,MAAM,EAAKJ,MAAMK,OAASH,EAAEI,OAAOC,MAChD,EAAKC,SAAS,CAAEC,GAAIP,EAAEI,OAAOC,SArBd,EAwBnBG,QAAU,SAACR,GACP,EAAKF,MAAMW,QAAQC,MAAnB,gBAvBA,EAAKC,MAAQ,CAAEJ,GAAIT,EAAMS,IAFV,E,iFAMfK,KAAKX,QAAQC,MAAMU,KAAKd,MAAMK,OAASS,KAAKD,MAAMJ,K,kCAIlD,OAAOK,KAAKd,MAAMW,QAAQC,QAAUE,O,8BAIhCA,KAAKF,OACLE,KAAKF,MAAMG,U,+BAaT,IAAD,OACDC,EAAOF,KAAKd,MAAMgB,KAAKC,YACvBR,EAAKK,KAAKD,MAAMJ,GAAKK,KAAKD,MAAMJ,GAAGQ,YAAc,GACrD,OAAQ,kBAACC,EAAA,EAAD,CACJC,MAAOH,EACPI,YAAY,sBACZC,WAAS,EACTC,OAAO,SACPC,WAAS,EACThB,MAAOE,EACPe,SAAUV,KAAKb,cACfS,QAASI,KAAKJ,QACde,SAAU,SAAAb,GAAeA,IAAO,EAAKA,MAAQA,U,GA3CvBf,IAAM6B,WAAnB3B,EACV4B,YAAc/B,E,wCCCJgC,E,2MAEjBjB,QAAU,CAAEC,MAAO,M,EAqBnBiB,YAAc,YAMP,IALHC,EAKE,EALFA,IACAzB,EAIE,EAJFA,MAGA0B,GACE,EAHFC,YAGE,EAFFC,UAEE,EADFF,OAEMG,EAAI,EAAKlC,MAAMI,MAAMC,GAC3B,OACI,yBAAKyB,IAAKA,EAAKC,MAAOA,GAClB,kBAAC,EAAD,CAAMf,KAAMkB,EAAElB,KAAMP,GAAIyB,EAAEzB,GAAIJ,MAAOA,EAAOM,QAAS,EAAKA,QAASwB,IAAK,SAAAC,GAAcA,IAAMF,EAAEC,IAAMC,Q,wEA7BtG,IAAD,OACL,OACI,yBAAKL,MAAO,CAAEM,YAAa,GAAIC,WAAY,GAAIC,cAAe,GAAIC,OAAQ,OAAQC,SAAU,IACxF,kBAAC,IAAD,MACK,gBAAGD,EAAH,EAAGA,OAAQE,EAAX,EAAWA,MAAX,OACG,kBAAC,IAAD,CACIA,MAAOA,EACPF,OAAQA,EACRG,SAAU,EAAK3C,MAAMI,MAAMwC,OAC3BC,UAAW,GACXhB,YAAa,EAAKA,YAClBM,IAAK,SAACA,GAAcA,IAAK,EAAKhC,QAAQ2C,KAAOX,IAC7CJ,MAAO,CAAEQ,cAAe,c,GAhBlB1C,IAAM6B,WAAnBE,EACVD,YAAc/B,E,iNCWnBmD,EAAsBC,YAAW,CACnCC,aAAc,CACVC,gBAAiB,YAErBC,gBAAiB,CACbD,gBAAiB,cALGF,CAOzBI,KAGkBC,E,2MAOjBC,MAAQ,SAAClB,GACL,IAAM3B,EAAK,EAAKN,QAAQC,MAAMgC,EAAK/B,OACnC,YAAWkD,IAAP9C,EACO2B,EAAK3B,GAETA,G,EAGX+C,UAAY,SAACpB,GACT,OAAQ,EAAKkB,MAAMlB,I,EAGvBqB,cAAgB,WACZ,GAAI,EAAKzD,MAAMI,OAAS,EAAKD,QAAQC,MAAO,CACxC,IAAIsD,EAAO,EAD6B,uBAExC,YAAmB,EAAK1D,MAAMI,MAA9B,+CAAqC,CAAC,IAA3BgC,EAA0B,QAC5B,EAAKoB,UAAUpB,KAAOsB,GAAQ,IAHC,kFAKxC,EAAKlD,SAAS,CAAEkD,SAEpBC,WAAW,EAAKF,cAAe,M,EAGnCG,WAAa,WAAO,IAAD,uBACf,YAA4B,EAAK5D,MAAMI,MAAMyD,UAA7C,+CAAwD,CAAC,IAAD,6BAA5CxD,EAA4C,KAArC+B,EAAqC,KACpD,GAAIA,EAAKD,KAAOC,EAAKD,IAAI2B,YACrB,OAAOzD,GAHA,kFAMf,OAAQ,G,EAGZ0D,cAAgB,WACZ,IAAMC,EAAU,EAAKJ,aACL,EAAK5D,MAAMI,OAAO4D,EAAU,GAAK,EAAKhE,MAAMI,MAAMwC,QAC1DT,IAAI8B,S,EAGhBC,kBAAoB,WAChB,IAAIF,EAAU,EAAKJ,aACfI,EAAU,IACVA,EAAU,EAAKhE,MAAMI,MAAMwC,QAEf,EAAK5C,MAAMI,OAAO4D,EAAU,GAAK,EAAKhE,MAAMI,MAAMwC,QAC1DT,IAAI8B,S,EAGhBE,qBAAuB,WACnB,IAAIH,EAAU,EAAKJ,aACfI,EAAU,IACVA,EAAU,GAGd,IADA,IAAII,EAASJ,EALY,aAOrBI,GAAUA,EAAS,GAAK,EAAKpE,MAAMI,MAAMwC,OACzC,IAAMR,EAAO,EAAKpC,MAAMI,MAAMgE,GAC9B,GAAI,EAAKZ,UAAUpB,IAASgC,IAAWJ,EAQnC,OAPII,GAAU,EAAKpE,MAAMI,MAAMwC,OAAS,IACpCwB,EAAS,EAAKpE,MAAMI,MAAMwC,OAAS,GAEvC,EAAKzC,QAAQ2C,KAAKuB,YAAYD,EAAS,GACvCT,YAAW,WACHvB,EAAKD,KAAKC,EAAKD,IAAI8B,UACxB,KACH,WAXK,kBAWL,Q,EAKZK,yBAA2B,WACvB,IAAIN,EAAU,EAAKJ,aACfI,EAAU,IACVA,EAAU,EAAKhE,MAAMI,MAAMwC,OAAS,GAGxC,IADA,IAAIwB,EAASJ,EALgB,cAOzBI,GAAUA,EAAS,GAAK,EAAKpE,MAAMI,MAAMwC,QAC5B,IACTwB,EAAS,EAAKpE,MAAMI,MAAMwC,OAAS,GAEvC,IAAMR,EAAO,EAAKpC,MAAMI,MAAMgE,GAC9B,GAAI,EAAKZ,UAAUpB,IAASgC,IAAWJ,EAQnC,OAPII,GAAU,IACVA,EAAS,GAEb,EAAKjE,QAAQ2C,KAAKuB,YAAYD,EAAS,GACvCT,YAAW,WACHvB,EAAKD,KAAKC,EAAKD,IAAI8B,UACxB,KACH,WAdK,kBAcL,Q,EAKZM,QAAU,WACN,IAAIC,EAAI,UAAM,EAAKxE,MAAMyE,SAAjB,QADI,uBAEZ,YAAmB,EAAKzE,MAAMI,MAA9B,+CAAqC,CAAC,IAA3BgC,EAA0B,QACjCoC,GAAI,UAAOpC,EAAKpB,KAAZ,eAAuB,EAAKsC,MAAMlB,IAAS,GAA3C,SAHI,kFAKZ,EAAKsC,SAASF,I,EAGlBE,SAAW,SAACF,GAER,IAAMG,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACP,GAAO,CAAEQ,KAAM,eACtCL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQD,SAAW,UACnBE,SAASQ,KAAKC,YAAYV,GAC1BA,EAAQW,S,EAGZC,OAAS,WACL,EAAKvF,MAAMuF,U,mFApHX5B,WAAW7C,KAAK2C,cAAe,O,+BAwH/B,OACI,oCACI,kBAAC+B,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAK7D,MAAO,CAAE8D,aAAc,KAAhD,kBAGA,kBAACC,EAAA,EAAD,CAASC,MAAM,OAAOC,aAAW,QAC7B,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAAStF,KAAKyE,QACnD,kBAAC,IAAD,QAGPzE,KAAKd,MAAMI,OACR,oCACI,kBAAC0F,EAAA,EAAD,CAASC,MAAM,OAAOC,aAAW,QAC7B,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAAStF,KAAKyD,QAASxC,MAAO,CAAEsE,YAAa,KAClF,kBAAC,IAAD,QAIR,kBAACP,EAAA,EAAD,CAASC,MAAM,wBAAwBC,aAAW,yBAC9C,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAAStF,KAAKwD,0BACnD,kBAAC,IAAD,QAGR,kBAACwB,EAAA,EAAD,CAASC,MAAM,8BAA8BC,aAAW,iBACpD,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAAStF,KAAKoD,mBACnD,kBAAC,IAAD,QAGR,kBAAC4B,EAAA,EAAD,CAASC,MAAM,kBAAkBC,aAAW,aACxC,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAAStF,KAAKiD,eACnD,kBAAC,IAAD,QAGR,kBAAC+B,EAAA,EAAD,CAASC,MAAM,oBAAoBC,aAAW,qBAC1C,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAAStF,KAAKqD,sBACnD,kBAAC,IAAD,SAKfrD,KAAKd,MAAMsG,SAAY,kBAACC,EAAA,EAAD,MACxB,yBAAKxE,MAAO,CAAEU,SAAU,KACxB,kBAACqD,EAAA,EAAD,CAASC,MAAM,cAAcC,aAAW,eACpC,kBAACC,EAAA,EAAD,CAAYE,MAAM,UAAU7F,OAAO,SAAS2E,KAAK,mDAC7C,kBAAC,IAAD,SAIXnE,KAAK0F,qB,uCAOlB,IAAK1F,KAAKd,MAAMI,MACZ,OAAO,KAEX,IAAMsD,EAAO5C,KAAKD,OAAQC,KAAKD,MAAM6C,MAAY,EAC3C+C,EAAUC,KAAKC,MAAOjD,EAAO5C,KAAKd,MAAMI,MAAMwC,OAAU,KACxDgE,EAAQ,UAAMlD,EAAN,YAAc5C,KAAKd,MAAMI,MAAMwC,OAA/B,uBAAoD6D,EAApD,MACd,OACI,kBAACX,EAAA,EAAD,CAASC,MAAOa,EAAUZ,aAAW,YACjC,kBAACjD,EAAD,CAAqB6C,QAAQ,cAAcrF,MAAOkG,S,GA7L1B5G,IAAM6B,WAAzB2B,EACV1B,YAAc/B,E,ICtBnBiH,E,iLAEF,OACE,kBAACjH,EAAWkH,SAAZ,CAAqBvG,MAAO,IAC1B,kBAAC,EAAD,W,GAJmBV,IAAM6B,WAU3BqF,E,2MAYJC,YAAc,WACZ,EAAKxG,SAAS,CAAE8F,SAAS,GAAQ,EAAKf,S,EAGxCA,OAAS,WAEP,IAaM0B,EAAYrC,SAASC,cAAc,SACzCoC,EAAUjC,KAAO,OACjBiC,EAAUlF,MAAMmF,QAAU,OAC1BD,EAAUE,SAhBO,SAAUjH,GACzB,IAAI4E,EAAO5E,EAAEI,OAAO8G,MAAM,GAC1B,GAAKtC,EAAL,CAGA,IAAIuC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUrH,GACxB,IAAIsH,EAAWtH,EAAEI,OAAOmH,OACxBR,EAAUS,KAAKF,GACf5C,SAASQ,KAAKuC,YAAYV,IAE5BI,EAAOO,WAAW9C,KAMpBmC,EAAUS,KAAO,EAAKG,WACtBjD,SAASQ,KAAKC,YAAY4B,GAC1BA,EAAU3B,S,EAGZuC,WAAa,SAACL,GACZ,IAAMpH,EAAQoH,EAASM,QAAQ,MAAO,IAAIC,MAAM,MAC5CN,EAAS,GACTzG,EAAO,KACPP,EAAK,KACLgE,EAAW,GACXpE,EAAQ,EANa,uBAOzB,YAAmBD,EAAnB,+CAA0B,CAAC,IAAhBgC,EAAe,QACpBA,EAAK4F,WAAW,MAClBvD,EAAQ,UAAMA,EAAN,eAAqBrC,GACX,OAATpB,EACTA,EAAOoB,EACS,OAAP3B,EACTA,EAAK2B,GAELqF,EAAOQ,KAAK,CAAEjH,OAAMP,KAAIJ,UACxBA,GAAS,EACTW,EAAOoB,EACP3B,EAAK,OAlBgB,kFAqBrBO,IACFyG,EAAOQ,KAAK,CAAEjH,OAAMP,KAAIJ,UACxBA,GAAS,GAEX,EAAKF,QAAQC,MAAQ,IAAI8H,MAAMT,EAAO7E,QACtC,EAAKpC,SAAS,CAAEJ,MAAOqH,EAAQhD,aAAY,WACrC,EAAKtE,QAAQ2C,MACfa,YAAW,WACT,EAAKxD,QAAQ2C,KAAKqF,kBAClB,EAAKhI,QAAQ2C,KAAKsF,cAClB,EAAKjI,QAAQ2C,KAAKuB,YAAY,KAC7B,S,wEArEP,OACE,yBAAKgE,UAAU,MAAMtG,MAAO,CAAES,OAAQ,SACpC,kBAAC,EAAD,CAAYpC,MAAOU,KAAKD,OAASC,KAAKD,MAAMT,MAAOqE,SAAU3D,KAAKD,OAASC,KAAKD,MAAM4D,SAAUc,OAAQzE,KAAKkG,YAAaV,QAASxF,KAAKD,OAASC,KAAKD,MAAMyF,UAC3JxF,KAAKD,OAASC,KAAKD,MAAMT,OAAS,kBAAC,EAAD,CAAMA,MAAOU,KAAKD,MAAMT,MAAOqE,SAAU3D,KAAKD,MAAM4D,aACpF3D,KAAKD,QAAUC,KAAKD,MAAMT,QAAU,kBAACuF,EAAA,EAAD,CAAY5D,MAAO,CAAEO,WAAY,IAAKD,YAAa,KAAnD,gC,GAP7BxC,IAAM6B,WAAlBqF,EACGpF,YAAc/B,EA6ERiH,QCnFKyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShE,SAASiE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5a94a58f.chunk.js","sourcesContent":["import React from 'react';\n\nexport const AppContext = React.createContext({});","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { AppContext } from './context';\n\nexport default class Line extends React.Component {\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { to: props.to };\n    }\n\n    componentDidMount() {\n        this.context.lines[this.props.index] = this.state.to;\n    }\n\n    IsFocused() {\n        return this.props.focused.input === this;\n    }\n\n    Focus() {\n        if (this.input) {\n            this.input.focus();\n        }\n    }\n\n    onLineChanged = (e) => {\n        this.context.lines[this.props.index] = e.target.value;\n        this.setState({ to: e.target.value });\n    }\n\n    onFocus = (e) => {\n        this.props.focused.input = this;\n    }\n\n    render() {\n        let from = this.props.from.trimStart();\n        let to = this.state.to ? this.state.to.trimStart() : \"\";\n        return (<TextField\n            label={from}\n            placeholder=\"Missing translation\"\n            multiline\n            margin=\"normal\"\n            fullWidth\n            value={to}\n            onChange={this.onLineChanged}\n            onFocus={this.onFocus}\n            inputRef={input => { if (input) this.input = input; }}\n        />\n        )\n    }\n}","import React from 'react';\nimport Line from './line';\nimport List from 'react-virtualized/dist/commonjs/List';\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\nimport { AppContext } from './context';\n\nexport default class File extends React.Component {\n    static contextType = AppContext;\n    focused = { input: null };\n\n    render() {\n        return (\n            <div style={{ paddingLeft: 10, paddingTop: 60, paddingBottom: 10, height: \"100%\", flexGrow: 1 }} >\n                <AutoSizer>\n                    {({ height, width }) => (\n                        <List\n                            width={width}\n                            height={height}\n                            rowCount={this.props.lines.length}\n                            rowHeight={50}\n                            rowRenderer={this.rowRenderer}\n                            ref={(ref) => { if (ref) this.context.list = ref; }}\n                            style={{ paddingBottom: 10 }}\n                        />\n                    )}\n                </AutoSizer>\n            </div>)\n    }\n\n    rowRenderer = ({\n        key, // Unique key within array of rows\n        index, // Index of row within collection\n        isScrolling, // The List is currently being scrolled\n        isVisible, // This row is visible within the List (eg it is not an over-scanned row)\n        style, // Style object to be applied to row (to position it)\n    }) => {\n        const l = this.props.lines[index];\n        return (\n            <div key={key} style={style}>\n                <Line from={l.from} to={l.to} index={index} focused={this.focused} ref={line => { if (line) l.ref = line; }}></Line>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { withStyles } from '@material-ui/core/styles';\nimport { AppContext } from './context';\n\nconst ColorLinearProgress = withStyles({\n    colorPrimary: {\n        backgroundColor: 'darkblue',\n    },\n    barColorPrimary: {\n        backgroundColor: 'lightblue',\n    },\n})(LinearProgress);\n\n\nexport default class AGSToolbar extends React.Component {\n    static contextType = AppContext;\n\n    componentDidMount() {\n        setTimeout(this.trackProgress, 500);\n    }\n\n    getTo = (line) => {\n        const to = this.context.lines[line.index];\n        if (to === undefined) {\n            return line.to;\n        }\n        return to;\n    }\n\n    isMissing = (line) => {\n        return !this.getTo(line);\n    }\n\n    trackProgress = () => {\n        if (this.props.lines && this.context.lines) {\n            let full = 0;\n            for (const line of this.props.lines) {\n                if (!this.isMissing(line)) full += 1;\n            }\n            this.setState({ full });\n        }\n        setTimeout(this.trackProgress, 500);\n    }\n\n    getFocused = () => {\n        for (const [index, line] of this.props.lines.entries()) {\n            if (line.ref && line.ref.IsFocused()) {\n                return index;\n            }\n        }\n        return -1;\n    }\n\n    onNextClicked = () => {\n        const current = this.getFocused();\n        const toFocus = this.props.lines[(current + 1) % this.props.lines.length];\n        toFocus.ref.Focus();\n    }\n\n    onPreviousClicked = () => {\n        let current = this.getFocused();\n        if (current < 1) {\n            current = this.props.lines.length;\n        }\n        const toFocus = this.props.lines[(current - 1) % this.props.lines.length];\n        toFocus.ref.Focus();\n    }\n\n    onNextMissingClicked = () => {\n        let current = this.getFocused();\n        if (current < 0) {\n            current = 0;\n        }\n        let cursor = current;\n        while (true) {\n            cursor = (cursor + 1) % this.props.lines.length;\n            const line = this.props.lines[cursor];\n            if (this.isMissing(line) || cursor === current) {\n                if (cursor >= this.props.lines.length - 1) {\n                    cursor = this.props.lines.length - 2;\n                }\n                this.context.list.scrollToRow(cursor + 1);\n                setTimeout(() => {\n                    if (line.ref) line.ref.Focus();\n                }, 100);\n                break;\n            }\n        }\n    }\n\n    onPreviousMissingClicked = () => {\n        let current = this.getFocused();\n        if (current < 0) {\n            current = this.props.lines.length - 1;\n        }\n        let cursor = current;\n        while (true) {\n            cursor = (cursor - 1) % this.props.lines.length;\n            if (cursor < 0) {\n                cursor = this.props.lines.length - 1;\n            }\n            const line = this.props.lines[cursor];\n            if (this.isMissing(line) || cursor === current) {\n                if (cursor <= 0) {\n                    cursor = 1;\n                }\n                this.context.list.scrollToRow(cursor - 1);\n                setTimeout(() => {\n                    if (line.ref) line.ref.Focus();\n                }, 100);\n                break;\n            }\n        }\n    }\n\n    genFile = () => {\n        let text = `${this.props.comments}\\r\\n`;\n        for (const line of this.props.lines) {\n            text += `${line.from}\\r\\n${this.getTo(line) || \"\"}\\r\\n`;\n        }\n        this.download(text);\n    }\n\n    download = (text) => {\n        //https://stackoverflow.com/questions/44656610/download-a-string-as-txt-file-in-react/44661948\n        const element = document.createElement(\"a\");\n        const file = new Blob([text], { type: 'text/plain' });\n        element.href = URL.createObjectURL(file);\n        element.download = \"ags.trs\";\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    upload = () => {\n        this.props.upload();\n    }\n\n    render() {\n        return (\n            <>\n                <AppBar position=\"fixed\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" style={{ paddingRight: 50 }}>\n                            AGS TRS Editor\n                        </Typography>\n                        <Tooltip title=\"Load\" aria-label=\"load\">\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={this.upload}>\n                                <CloudUploadIcon />\n                            </IconButton>\n                        </Tooltip>\n                        {this.props.lines && (\n                            <>\n                                <Tooltip title=\"Save\" aria-label=\"save\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.genFile} style={{ marginRight: 50 }}>\n                                        <CloudDownloadIcon />\n                                    </IconButton>\n                                </Tooltip>\n\n                                <Tooltip title=\"Previous missing line\" aria-label=\"previous missing line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onPreviousMissingClicked}>\n                                        <SkipPreviousIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Previous line (SHIFT + TAB)\" aria-label=\"previous line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onPreviousClicked}>\n                                        <ChevronLeftIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Next line (TAB)\" aria-label=\"next line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onNextClicked}>\n                                        <ChevronRightIcon />\n                                    </IconButton>\n                                </Tooltip >\n                                <Tooltip title=\"Next missing line\" aria-label=\"next missing line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onNextMissingClicked}>\n                                        <SkipNextIcon />\n                                    </IconButton>\n                                </Tooltip >\n                            </>\n                        )}\n                        {this.props.loading && (<CircularProgress />)}\n                        <div style={{ flexGrow: 1 }} />\n                        <Tooltip title=\"Source Code\" aria-label=\"source code\">\n                            <IconButton color=\"inherit\" target=\"_blank\" href=\"https://github.com/tzachshabtay/ags-trs-editor/\">\n                                <GitHubIcon />\n                            </IconButton>\n                        </Tooltip >\n                    </Toolbar >\n                    {this.renderProgress()}\n                </AppBar >\n            </>\n        )\n    }\n\n    renderProgress() {\n        if (!this.props.lines) {\n            return null;\n        }\n        const full = this.state ? this.state.full || 0 : 0;\n        const percent = Math.round((full / this.props.lines.length) * 100);\n        const progress = `${full}/${this.props.lines.length} Completed (${percent}%)`\n        return (\n            <Tooltip title={progress} aria-label=\"progress\">\n                <ColorLinearProgress variant=\"determinate\" value={percent} />\n            </Tooltip>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport File from './trsFile';\nimport AGSToolbar from './toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { AppContext } from './context';\n\nclass AppContainer extends React.Component {\n  render() {\n    return (\n      <AppContext.Provider value={{}}>\n        <App />\n      </AppContext.Provider>\n    );\n  }\n}\n\nclass App extends React.Component {\n  static contextType = AppContext;\n  render() {\n    return (\n      <div className=\"App\" style={{ height: \"100%\" }}>\n        <AGSToolbar lines={this.state && this.state.lines} comments={this.state && this.state.comments} upload={this.startUpload} loading={this.state && this.state.loading} />\n        {this.state && this.state.lines && <File lines={this.state.lines} comments={this.state.comments} />}\n        {(!this.state || !this.state.lines) && <Typography style={{ paddingTop: 100, paddingLeft: 50 }}>Please load a TRS file.</Typography>}\n      </div>\n    );\n  }\n\n  startUpload = () => {\n    this.setState({ loading: true }, this.upload);\n  }\n\n  upload = () => {\n    //https://stackoverflow.com/questions/3582671/how-to-open-a-local-disk-file-with-javascript\n    const readFile = function (e) {\n      var file = e.target.files[0];\n      if (!file) {\n        return;\n      }\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var contents = e.target.result;\n        fileInput.func(contents)\n        document.body.removeChild(fileInput)\n      }\n      reader.readAsText(file)\n    }\n    const fileInput = document.createElement(\"input\")\n    fileInput.type = 'file'\n    fileInput.style.display = 'none'\n    fileInput.onchange = readFile\n    fileInput.func = this.onUploaded\n    document.body.appendChild(fileInput)\n    fileInput.click()\n  }\n\n  onUploaded = (contents) => {\n    const lines = contents.replace(/\\r/g, \"\").split(\"\\n\");\n    let result = [];\n    let from = null;\n    let to = null;\n    let comments = \"\";\n    let index = 0;\n    for (const line of lines) {\n      if (line.startsWith(\"//\")) {\n        comments = `${comments}\\r\\n${line}`;\n      } else if (from === null) {\n        from = line;\n      } else if (to === null) {\n        to = line;\n      } else {\n        result.push({ from, to, index });\n        index += 1;\n        from = line;\n        to = null;\n      }\n    }\n    if (from) {\n      result.push({ from, to, index });\n      index += 1;\n    }\n    this.context.lines = new Array(result.length);\n    this.setState({ lines: result, comments }, () => {\n      if (this.context.list) {\n        setTimeout(() => {\n          this.context.list.forceUpdateGrid();\n          this.context.list.forceUpdate();\n          this.context.list.scrollToRow(0);\n        }, 500);\n      }\n    });\n  }\n}\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}