{"version":3,"sources":["context.js","line.js","trsFile.js","toolbar.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","trimStart","str","replace","Line","props","focus","input","onLineChanged","e","context","lines","index","target","value","setState","to","onFocus","focused","state","this","from","label","helperText","length","Grid","container","alignItems","direction","spacing","style","marginTop","item","xs","TextField","placeholder","margin","fullWidth","onChange","inputRef","inputProps","spellCheck","Component","contextType","File","onSearch","text","searchVisualToReal","searchRealToVisual","mappingIndex","toLowerCase","entries","line","includes","getTo","search","searchText","undefined","rowRenderer","key","isVisible","isScrolling","l","lastRendered","count","Object","keys","paddingLeft","paddingTop","paddingBottom","height","flexGrow","width","rowCount","rowHeight","ref","list","encodings","require","ColorLinearProgress","withStyles","colorPrimary","backgroundColor","barColorPrimary","LinearProgress","ColorSelect","inputRoot","color","padding","Autocomplete","AGSToolbar","getAt","isMissing","trackProgress","full","setTimeout","getFocused","focusLine","findNext","filter","current","cursor","len","scrollToRow","findPrev","onNextClicked","onPreviousClicked","onNextMissingClicked","onPreviousMissingClicked","genFile","comments","download","element","document","createElement","file","Blob","type","encoding","href","URL","createObjectURL","body","appendChild","click","upload","searchValue","visualIndex","findVisibleVisualIndex","onHelpClicked","showHelp","onJumpToLineClicked","showJumpToLine","onJumpToLine","jumpLine","parseInt","parseEncodings","res","group","push","name","AppBar","position","Toolbar","Typography","variant","paddingRight","Tooltip","title","aria-label","IconButton","edge","onClick","marginRight","marginLeft","loading","CircularProgress","id","options","onEncodingChanged","getOptionLabel","option","renderInput","params","size","onCancelSearch","renderProgress","renderHelpDialog","renderJumpToLineDialog","percent","Math","round","progress","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","dividers","gutterBottom","autoFocus","InputLabelProps","shrink","min","step","DialogActions","Button","AppContainer","Provider","App","newValue","parseFile","startUpload","fileInput","display","onchange","files","func","removeChild","reader","FileReader","onload","contents","result","onUploaded","readAsText","split","startsWith","Array","forceUpdateGrid","forceUpdate","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f102fca3.chunk.js","sourcesContent":["import React from 'react';\n\nexport const AppContext = React.createContext({});","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { AppContext } from './context';\n\nconst trimStart = (str) => {\n    // NOTE String.trimStart is available on Firefox 61\n    return str.replace(/^\\s+/, '');\n};\n\nexport default class Line extends React.Component {\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { to: props.to };\n    }\n\n    componentDidMount() {\n        this.context.lines[this.props.index] = this.state.to;\n        this.context.focus[this.props.index] = this.focus;\n    }\n\n    componentWillUnmount() {\n        this.context.focus[this.props.index] = null;\n    }\n\n    focus = () => {\n        if (this.input) {\n            this.input.focus();\n        }\n    }\n\n    onLineChanged = (e) => {\n        this.context.lines[this.props.index] = e.target.value;\n        this.setState({ to: e.target.value });\n    }\n\n    onFocus = (e) => {\n        this.context.focused = this.props.index;\n    }\n\n    render() {\n        let from = trimStart(this.props.from);\n        let label = from;\n        let helperText = \"\";\n        if (from && from.length > 200) {\n            label = \"\";\n            helperText = from;\n        }\n        let to = this.state.to ? trimStart(this.state.to) : \"\";\n        return (<Grid container alignItems=\"center\" direction=\"row\" spacing={0} style={{ marginTop: 5 }}>\n            <Grid item xs={1}>\n                <span>{this.props.index + 1}</span>\n            </Grid>\n            <Grid item xs={11}>\n                <TextField\n                    label={label}\n                    helperText={helperText}\n                    placeholder=\"Missing translation\"\n                    margin=\"normal\"\n                    fullWidth\n                    value={to}\n                    onChange={this.onLineChanged}\n                    onFocus={this.onFocus}\n                    inputRef={input => { if (input) this.input = input; }}\n                    inputProps={{ spellCheck: true }}\n                />\n            </Grid>\n        </Grid>)\n    }\n}","import React from 'react';\nimport Line from './line';\nimport List from 'react-virtualized/dist/commonjs/List';\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\nimport { AppContext } from './context';\n\nexport default class File extends React.Component {\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { search: null, searchText: \"\" };\n    }\n\n    render() {\n        this.context.onSearch = this.onSearch;\n        const count = this.state.search ? Object.keys(this.state.search).length : this.props.lines.length;\n        return (\n            <div style={{ paddingLeft: 10, paddingTop: 60, paddingBottom: 10, height: \"100%\", flexGrow: 1 }} >\n                <AutoSizer>\n                    {({ height, width }) => (\n                        <List\n                            key={this.state.searchText}\n                            width={width}\n                            height={height}\n                            rowCount={count}\n                            rowHeight={80}\n                            rowRenderer={this.rowRenderer}\n                            ref={(ref) => { if (ref) this.context.list = ref; }}\n                            style={{ paddingBottom: 10 }}\n                        />\n                    )}\n                </AutoSizer>\n            </div>)\n    }\n\n    onSearch = (text) => {\n        if (!text) {\n            this.context.searchRealToVisual = null;\n            this.context.searchVisualToReal = null;\n            this.setState({ search: null, searchText: \"\" });\n        } else {\n            const searchVisualToReal = {};\n            const searchRealToVisual = {};\n            let mappingIndex = 0;\n            text = text.toLowerCase();\n            for (const [index, line] of this.props.lines.entries()) {\n                if (line.from.toLowerCase().includes(text) || this.getTo(line).toLowerCase().includes(text)) {\n                    searchVisualToReal[mappingIndex] = index;\n                    searchRealToVisual[index] = mappingIndex;\n                    mappingIndex += 1;\n                }\n            }\n            this.context.searchRealToVisual = searchRealToVisual;\n            this.context.searchVisualToReal = searchVisualToReal;\n            this.setState({ search: searchVisualToReal, searchText: text });\n        }\n    }\n\n    getTo = (line) => {\n        const to = this.context.lines[line.index];\n        if (to === undefined) {\n            return line.to;\n        }\n        return to;\n    }\n\n    rowRenderer = ({\n        key, // Unique key within array of rows\n        index, // Index of row within collection\n        isScrolling, // The List is currently being scrolled\n        isVisible, // This row is visible within the List (eg it is not an over-scanned row)\n        style, // Style object to be applied to row (to position it)\n    }) => {\n        if (this.state.search) {\n            index = this.state.search[index];\n        }\n        const l = this.props.lines[index];\n        let to = this.context.lines[index];\n        if (to === undefined) {\n            to = l.to;\n        }\n        if (isVisible) {\n            this.context.lastRendered = index;\n        }\n        return (\n            <div key={key} style={style}>\n                <Line from={l.from} to={to} index={index}></Line>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport InfoIcon from '@material-ui/icons/Info';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport SearchBar from 'material-ui-search-bar';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TelegramIcon from '@material-ui/icons/Telegram';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { withStyles } from '@material-ui/core/styles';\nimport { AppContext } from './context';\n\n//encodings taken from: https://github.com/whatwg/encoding/blob/main/encodings.json\nconst encodings = require('./encodings.json');\n\nconst ColorLinearProgress = withStyles({\n    colorPrimary: {\n        backgroundColor: 'darkblue',\n    },\n    barColorPrimary: {\n        backgroundColor: 'lightblue',\n    },\n})(LinearProgress);\n\nconst ColorSelect = withStyles({\n    inputRoot: {\n        color: \"black\",\n        backgroundColor: \"white\",\n        width: 200,\n        padding: 0,\n        margin: 0,\n    },\n})(Autocomplete);\n\nexport default class AGSToolbar extends React.Component {\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        this.encodings = this.parseEncodings();\n        this.state = { searchValue: \"\", showHelp: false, showJumpToLine: false, jumpLine: 1 };\n    }\n\n    parseEncodings() {\n        const res = []\n        for (const group of encodings) {\n            for (const encoding of group.encodings) {\n                res.push(encoding.name)\n            }\n        }\n        return res\n    }\n\n    componentDidMount() {\n        setTimeout(this.trackProgress, 500);\n    }\n\n    getAt = (index) => {\n        if (this.context.searchVisualToReal) {\n            index = this.context.searchVisualToReal[index];\n        }\n        return this.props.lines[index];\n    }\n\n    getTo = (line) => {\n        const to = this.context.lines[line.index];\n        if (to === undefined) {\n            return line.to;\n        }\n        return to;\n    }\n\n    isMissing = (line) => {\n        if (!this.isVisible(line)) return false;\n        return !this.getTo(line);\n    }\n\n    isVisible = (line) => {\n        if (!this.context.searchRealToVisual) return true;\n        return line.index in this.context.searchRealToVisual;\n    }\n\n    trackProgress = () => {\n        if (this.props.lines && this.context.lines) {\n            let full = 0;\n            for (const line of this.props.lines) {\n                if (!this.isMissing(line)) full += 1;\n            }\n            this.setState({ full });\n        }\n        setTimeout(this.trackProgress, 500);\n    }\n\n    getFocused = () => {\n        if (this.context.searchRealToVisual) {\n            return this.context.searchRealToVisual[this.context.focused] || -1;\n        }\n        return this.context.focused || -1;\n    }\n\n    focusLine = (line) => {\n        if (line.index in this.context.focus && this.context.focus[line.index]) {\n            this.context.focus[line.index]();\n        }\n    }\n\n    findNext = (filter) => {\n        let current = this.getFocused();\n        if (current < 0) {\n            current = 0;\n        }\n        let cursor = current;\n        let len = this.props.lines.length;\n        if (this.context.searchRealToVisual) {\n            len = Object.keys(this.context.searchRealToVisual).length;\n        }\n        while (true) {\n            cursor = (cursor + 1) % len;\n            const line = this.getAt(cursor);\n            if (filter(line) || cursor === current) {\n                if (cursor >= len - 1) {\n                    cursor = len - 2;\n                }\n                if (cursor < 0) {\n                    cursor = -1;\n                }\n                this.context.list.scrollToRow(cursor + 1);\n                setTimeout(() => {\n                    this.focusLine(line);\n                }, 100);\n                break;\n            }\n        }\n    }\n\n    findPrev = (filter) => {\n        let current = this.getFocused();\n        let len = this.props.lines.length;\n        if (this.context.searchRealToVisual) {\n            len = Object.keys(this.context.searchRealToVisual).length;\n        }\n        if (current < 0) {\n            current = len - 1;\n        }\n        let cursor = current;\n        while (true) {\n            cursor = (cursor - 1) % len;\n            if (cursor < 0) {\n                cursor = len - 1;\n            }\n            const line = this.getAt(cursor);\n            if (filter(line) || cursor === current) {\n                if (cursor <= 0) {\n                    cursor = 1;\n                }\n                this.context.list.scrollToRow(cursor - 1);\n                setTimeout(() => {\n                    this.focusLine(line);\n                }, 100);\n                break;\n            }\n        }\n    }\n\n    onNextClicked = () => {\n        this.findNext(this.isVisible);\n    }\n\n    onPreviousClicked = () => {\n        this.findPrev(this.isVisible);\n    }\n\n    onNextMissingClicked = () => {\n        this.findNext(this.isMissing);\n    }\n\n    onPreviousMissingClicked = () => {\n        this.findPrev(this.isMissing);\n    }\n\n    genFile = () => {\n        let text = `${this.props.comments}\\r\\n`;\n        for (const line of this.props.lines) {\n            text += `${line.from}\\r\\n${this.getTo(line) || \"\"}\\r\\n`;\n        }\n        this.download(text);\n    }\n\n    download = (text) => {\n        //https://stackoverflow.com/questions/44656610/download-a-string-as-txt-file-in-react/44661948\n        const element = document.createElement(\"a\");\n        const file = new Blob([text], { type: `text/plain;charset=${this.props.encoding}` });\n        element.href = URL.createObjectURL(file);\n        element.download = \"ags.trs\";\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    upload = () => {\n        this.props.upload();\n    }\n\n    onSearch = (text) => {\n        this.setState({ searchValue: text });\n        setTimeout(() => {\n            if (this.state.searchValue === text) {\n                const lastRendered = this.context.lastRendered;\n                this.context.onSearch(text);\n                if (lastRendered) {\n                    const visualIndex = this.findVisibleVisualIndex(lastRendered);\n                    if (visualIndex !== 0 && !visualIndex) {\n                        return;\n                    }\n                    this.context.list.scrollToRow(visualIndex + 1);\n                }\n            }\n        }, 200);\n    }\n\n    onHelpClicked = () => {\n        this.setState({ showHelp: true });\n    }\n\n    onJumpToLineClicked = () => {\n        this.setState({ showJumpToLine: true });\n    }\n\n    findVisibleVisualIndex = (index) => {\n        if (!this.context.searchVisualToReal) {\n            return index;\n        }\n        while (!(index in this.context.searchRealToVisual) && index >= 0) {\n            index -= 1;\n        }\n        return this.context.searchRealToVisual[index];\n    }\n\n    onJumpToLine = () => {\n        let jumpLine = parseInt(this.state.jumpLine);\n        if (jumpLine >= this.props.lines.length) {\n            jumpLine = this.props.lines.length - 1;\n            this.setState({ jumpLine });\n        } else if (jumpLine < 1) {\n            jumpLine = 1;\n            this.setState({ jumpLine });\n        }\n        const line = this.props.lines[jumpLine];\n        const visualIndex = this.findVisibleVisualIndex(jumpLine);\n        if (visualIndex !== 0 && !visualIndex) {\n            return;\n        }\n        this.context.list.scrollToRow(visualIndex + 1);\n        setTimeout(() => {\n            this.focusLine(line);\n        }, 100);\n    }\n\n    render() {\n        return (\n            <>\n                <AppBar position=\"fixed\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" style={{ paddingRight: 50 }}>\n                            AGS TRS Editor\n                        </Typography>\n                        <Tooltip title=\"Load\" aria-label=\"load\">\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={this.upload}>\n                                <CloudUploadIcon />\n                            </IconButton>\n                        </Tooltip>\n                        {this.props.lines && (\n                            <>\n                                <Tooltip title=\"Save\" aria-label=\"save\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.genFile} style={{ marginRight: 50 }}>\n                                        <CloudDownloadIcon />\n                                    </IconButton>\n                                </Tooltip>\n\n                                <Tooltip title=\"Previous missing line\" aria-label=\"previous missing line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onPreviousMissingClicked}>\n                                        <SkipPreviousIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Previous line (SHIFT + TAB)\" aria-label=\"previous line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onPreviousClicked}>\n                                        <ChevronLeftIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Next line (TAB)\" aria-label=\"next line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onNextClicked}>\n                                        <ChevronRightIcon />\n                                    </IconButton>\n                                </Tooltip >\n                                <Tooltip title=\"Next missing line\" aria-label=\"next missing line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.onNextMissingClicked}>\n                                        <SkipNextIcon />\n                                    </IconButton>\n                                </Tooltip >\n                                <Tooltip title=\"Jump to line\" aria-label=\"jump to line\">\n                                    <IconButton edge=\"start\" color=\"inherit\" style={{ marginLeft: 40 }} onClick={this.onJumpToLineClicked}>\n                                        <TelegramIcon />\n                                    </IconButton>\n                                </Tooltip >\n                            </>\n                        )}\n                        {this.props.loading && (<CircularProgress />)}\n                        <div style={{ flexGrow: 1 }} />\n                        <ColorSelect\n                            id=\"encoding-select\"\n                            options={this.encodings}\n                            value={this.props.encoding}\n                            onChange={this.props.onEncodingChanged}\n                            getOptionLabel={(option) => option}\n                            style={{ width: 300 }}\n                            renderInput={(params) =>\n                                <TextField {...params} variant=\"outlined\" size=\"small\" />\n                            }\n                        >\n                        </ColorSelect>\n                        {this.props.lines && (\n                            <SearchBar value={this.state.searchValue} style={{ paddingLeft: 20 }}\n                                onChange={this.onSearch} onCancelSearch={() => this.onSearch(\"\")} />)}\n                        <Tooltip title=\"Help\" aria-label=\"help\">\n                            <IconButton color=\"inherit\" target=\"_blank\" onClick={this.onHelpClicked}>\n                                <InfoIcon />\n                            </IconButton>\n                        </Tooltip >\n                        <Tooltip title=\"Source Code\" aria-label=\"source code\">\n                            <IconButton color=\"inherit\" target=\"_blank\" href=\"https://github.com/tzachshabtay/ags-trs-editor/\">\n                                <GitHubIcon />\n                            </IconButton>\n                        </Tooltip >\n                    </Toolbar >\n                    {this.renderProgress()}\n                </AppBar >\n                {this.renderHelpDialog()}\n                {this.renderJumpToLineDialog()}\n            </>\n        )\n    }\n\n    renderProgress() {\n        if (!this.props.lines) {\n            return null;\n        }\n        const full = this.state ? this.state.full || 0 : 0;\n        const percent = Math.round((full / this.props.lines.length) * 100);\n        const progress = `${full}/${this.props.lines.length} Completed (${percent}%)`\n        return (\n            <Tooltip title={progress} aria-label=\"progress\">\n                <ColorLinearProgress variant=\"determinate\" value={percent} />\n            </Tooltip>\n        )\n    }\n\n    renderHelpDialog() {\n        return (\n            <Dialog\n                open={this.state.showHelp}\n                onClose={() => this.setState({ showHelp: false })}\n                aria-labelledby=\"help-dialog-title\"\n                aria-describedby=\"help-dialog-description\"\n            >\n                <DialogTitle id=\"help-dialog-title\">{\"AGS TRS Editor- Help\"}</DialogTitle>\n                <DialogContent dividers id=\"help-dialog-description\">\n                    <Typography gutterBottom>\n                        AGS TRS Editor helps edit trs file for translating AGS (Adventure Game Studio) games.\n                        Click the load button to load a trs file, make your edits and then click the save button to download it.\n                    </Typography>\n                    <Typography>\n                        - If you don't want to translate a line, just leave the following line blank.\n                    </Typography>\n                    <Typography>\n                        - Special characters such as [ and %%s symbolize things within the game, so should be left in an appropriate place in the message.\n                    </Typography>\n                </DialogContent>\n            </Dialog>);\n    }\n\n    renderJumpToLineDialog() {\n        return (\n            <Dialog\n                open={this.state.showJumpToLine}\n                onClose={() => this.setState({ showJumpToLine: false })}\n                aria-labelledby=\"jump-dialog-title\"\n                aria-describedby=\"jump-dialog-description\"\n            >\n                <DialogTitle id=\"jump-dialog-title\">{\"Jump To Line\"}</DialogTitle>\n                <DialogContent dividers id=\"jump-dialog-description\">\n                    <Typography gutterBottom>\n                        Select line number to jump:\n                    </Typography>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"lineNumber\"\n                        label=\"Line Number\"\n                        type=\"number\"\n                        InputLabelProps={{\n                            shrink: true\n                        }}\n                        inputProps={{ min: \"1\", step: \"1\" }}\n                        value={this.state.jumpLine}\n                        onChange={e => this.setState({ jumpLine: e.target.value })}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => this.setState({ showJumpToLine: false })} color=\"primary\">\n                        Close\n                    </Button>\n                    <Button onClick={this.onJumpToLine} color=\"primary\">\n                        Jump\n                    </Button>\n                </DialogActions>\n\n            </Dialog>);\n    }\n}","import React from 'react';\nimport './App.css';\nimport File from './trsFile';\nimport AGSToolbar from './toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { AppContext } from './context';\n\nclass AppContainer extends React.Component {\n  render() {\n    return (\n      <AppContext.Provider value={{ focus: {} }}>\n        <App />\n      </AppContext.Provider>\n    );\n  }\n}\n\nclass App extends React.Component {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n    this.state = { encoding: \"UTF-8\" };\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style={{ height: \"100%\" }}>\n        <AGSToolbar lines={this.state && this.state.lines} comments={this.state && this.state.comments} upload={this.startUpload} loading={this.state && this.state.loading} encoding={this.state && this.state.encoding} onEncodingChanged={this.onEncodingChanged} />\n        {this.state && this.state.lines && <File lines={this.state.lines} comments={this.state.comments} />}\n        {(!this.state || !this.state.lines) && <Typography style={{ paddingTop: 100, paddingLeft: 50 }}>Please load a TRS file.</Typography>}\n      </div>\n    );\n  }\n\n  onEncodingChanged = (e, newValue) => {\n    if (!newValue) {\n      return\n    }\n    this.setState({ encoding: newValue }, () => this.parseFile(this.state.file))\n  }\n\n  startUpload = () => {\n    this.setState({ loading: true }, this.upload);\n  }\n\n  upload = () => {\n    //https://stackoverflow.com/questions/3582671/how-to-open-a-local-disk-file-with-javascript\n    const readFile = function (e) {\n      var file = e.target.files[0];\n      fileInput.func(file)\n      document.body.removeChild(fileInput)\n    }\n    const fileInput = document.createElement(\"input\")\n    fileInput.type = 'file'\n    fileInput.style.display = 'none'\n    fileInput.onchange = readFile\n    fileInput.func = this.parseFile\n    document.body.appendChild(fileInput)\n    fileInput.click()\n  }\n\n  parseFile = (file) => {\n    if (!file) {\n      return;\n    }\n    this.setState({ file })\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      var contents = e.target.result;\n      reader.func(contents)\n    }\n    reader.func = this.onUploaded\n    reader.readAsText(file, this.state.encoding)\n  }\n\n  onUploaded = (contents) => {\n    const lines = contents.replace(/\\r/g, \"\").split(\"\\n\");\n    let result = [];\n    let from = null;\n    let to = null;\n    let comments = \"\";\n    let index = 0;\n    for (const line of lines) {\n      if (line.startsWith(\"//\")) {\n        if (!comments) comments = line;\n        else comments = `${comments}\\r\\n${line}`;\n      } else if (from === null) {\n        from = line;\n      } else if (to === null) {\n        to = line;\n      } else {\n        result.push({ from, to, index });\n        index += 1;\n        from = line;\n        to = null;\n      }\n    }\n    if (from) {\n      result.push({ from, to, index });\n      index += 1;\n    }\n    this.context.lines = new Array(result.length);\n    this.setState({ lines: result, comments }, () => {\n      if (this.context.list) {\n        setTimeout(() => {\n          this.context.list.forceUpdateGrid();\n          this.context.list.forceUpdate();\n          this.context.list.scrollToRow(0);\n        }, 500);\n      }\n    });\n  }\n}\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}